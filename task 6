(async () => {
  const sleep = ms => new Promise(res => setTimeout(res, ms));

  const filters = {
    sortBy: "Latest",
    datePosted: "Past month",
    contentType: "Images",
    postedBy: "People you follow",
    fromMembers: ["Alvin Foo"],
    fromCompanies: ["Zero2Launch"]
  };

  // 1. Open "All filters" panel and clear previous filters if any
  const openFiltersPanel = () => {
    const filterBtn = document.querySelector('button[aria-label*="Show all filters"]');
    if (filterBtn) {
      filterBtn.click();
      console.log("üü¢ Opened filters panel");
      return true;
    } else {
      console.warn("‚ùå Filters button not found");
      return false;
    }
  };
  const clearFilters = async () => {
    const clearBtns = [...document.querySelectorAll('button')].filter(b => /clear/i.test(b.innerText));
    for (const btn of clearBtns) {
      btn.click();
      console.log("üîÑ Cleared filter");
      await sleep(1000); // Wait for filter reset
    }
  };
  if (!openFiltersPanel()) return;

  await sleep(1500);
  await clearFilters();

  // 2. Apply checkbox filters with error handling
  async function applyCheckbox(group, option) {
    try {
      const fs = [...document.querySelectorAll('fieldset')].find(f => f.innerText.includes(group));
      if (!fs) throw new Error(`Fieldset for "${group}" not found`);

      const lbl = [...fs.querySelectorAll('label')].find(l => l.innerText.includes(option));
      if (!lbl) throw new Error(`Option "${option}" not found in "${group}"`);

      lbl.click();
      console.log(`‚úÖ Selected "${option}" in "${group}"`);
    } catch (error) {
      console.warn(`‚ùå ${error.message}`);
    }
    await sleep(1000);
  }

  await applyCheckbox("Sort by", filters.sortBy);
  await applyCheckbox("Date posted", filters.datePosted);
  await applyCheckbox("Content type", filters.contentType);
  await applyCheckbox("Posted by", filters.postedBy);

  // 3. Enhanced search field handler with typing effect
  async function applySearchField(ariaLabel, values, triggerText) {
    if (triggerText) {
      const triggerBtn = [...document.querySelectorAll('button')]
        .find(b => b.innerText.trim() === triggerText);
      if (triggerBtn) {
        triggerBtn.click();
        console.log(`üü¢ Clicked trigger: "${triggerText}"`);
        await sleep(1000);
      }
    }

    for (const value of values) {
      let input = document.querySelector(`[aria-label="${ariaLabel}"]`);
      if (!input) {
        console.warn(`‚ùå Input with aria-label "${ariaLabel}" not found`);
        continue;
      }

      // Focus and clear field
      input.focus();
      input.value = '';
      input.dispatchEvent(new Event('input', { bubbles: true }));
      await sleep(300);

      // Type the complete value at once (shows as typing)
      for (let i = 0; i < value.length; i++) {
        input.value = value.substring(0, i + 1);
        input.dispatchEvent(new Event('input', { bubbles: true }));
        await sleep(50);  // Reduce sleep time for faster typing
      }
      console.log(`‚å® Finished typing: "${value}"`);
      await sleep(1000); // Wait for suggestions

      // Select first suggestion
      const suggestionSelectors = [
        '[role="listbox"] li:first-child',
        '[role="option"]:first-child',
        '.autocomplete-item:first-child',
        '.basic-typeahead__option:first-child'
      ];

      let suggestion;
      for (const selector of suggestionSelectors) {
        suggestion = document.querySelector(selector);
        if (suggestion) break;
      }

      if (suggestion) {
        suggestion.scrollIntoView({ block: 'center' });
        await sleep(300);
        suggestion.click();
        console.log(`‚úÖ Selected first suggestion for "${value}"`);
      } else {
        console.warn(`‚ùå No suggestions found for "${value}"`);
      }

      await sleep(1000);
    }
  }

  // 4. Apply From Members and From Companies with retry logic
  const retry = async (fn, retries = 3, delay = 1000) => {
    for (let i = 0; i < retries; i++) {
      try {
        await fn();
        return; // If successful, break the loop
      } catch (err) {
        console.warn(`‚ùå Attempt ${i + 1} failed: ${err.message}`);
        if (i < retries - 1) await sleep(delay);
      }
    }
  };

  await retry(() => applySearchField("Add a person's name", filters.fromMembers, "Add a person's name"));
  await retry(() => applySearchField("Add a company's name", filters.fromCompanies, "Add a company's name"));

  // 5. Confirm selections and handle missing selections
  const selectedTexts = [...document.querySelectorAll('span.t-14.t-black--light.t-normal[aria-hidden="true"]')]
    .map(span => span.textContent.trim());

  console.log("üßæ Confirmed Selections:");
  filters.fromMembers.forEach(name => {
    if (selectedTexts.find(t => t.includes(name))) console.log(`üë§ From Member: ${name}`);
    else console.warn(`‚ùå Member "${name}" not selected`);
  });
  filters.fromCompanies.forEach(name => {
    if (selectedTexts.find(t => t.includes(name))) console.log(`üè¢ From Company: ${name}`);
    else console.warn(`‚ùå Company "${name}" not selected`);
  });

  // 6. Click Show Results with error handling
  const showBtn = [...document.querySelectorAll('button')].find(b => /show results/i.test(b.innerText));
  if (showBtn) {
    showBtn.click();
    console.log("üöÄ Show results clicked");
  } else {
    console.warn("‚ùå Show results button not found");
  }
})();

